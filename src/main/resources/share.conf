akka {
  loglevel = "INFO"

  // allow kubernetes to recreate the resource
  coordinated-shutdown.exit-jvm = on

  actor {
    provider = cluster

    allow-java-serialization = off

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo // switch the default serializer to kryo
      "infrastructure.serializer.KryoSerializable" = kryo
    }
  }

  remote {
    artery {
      enabled = on
      canonical {
        port = 2552
      }
    }
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    sharding {
      remember-entities = on
    }
  }

  management {
    http {
      bind-hostname = "0.0.0.0"
      bind-port = "8558"
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb {
        compaction-interval {
          "*" = 100
        }
      }
    }

    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
    }
  }
}

akka-kryo-serialization {
  type = "graph" // can serialize objects with shared or cyclic dependencies: alternative nograph, faster
  id-strategy = "default" // one of the fastest; alternative "explicit"
  post-serialization-transformations = "lz4" // "lz4,aes" compression with lz4 and encryption aes

  use-manifests = true // attach the class name to the serialization
  implicit-registration-logging = true // see how the standard classes/types are being registered

  // optional for id-strategy "incremental", mandatory for "explicit"
  mappings {}

  classes = []
}
